void swap(int *a, int *b){
    int temp = *a;
    *a=*b;
    *b=temp;
}

int partition(int arr[], int l, int r){
    //returns the correct position of pivot element
    int pivot = arr[r];
    int i=l;
    for(int j=l; j<r; j++){
        if (arr[j] <= pivot){
            swap(&arr[i] , &arr[j]);
            i++;
        }
    }
    swap(&arr[i], &arr[r]);
    return i;
}

int randomPartition(int arr[], int l, int r){
    int n=r-l+1;
    int pivot=rand()%n;
    swap(&arr[l+pivot], &arr[r]);
    return partition(arr, l, r);
}


int kthSmallest(int arr[], int l, int r, int k) {
    //code here
    if (k>0 && k <= r-l+1){
        int index=randomPartition(arr, l, r);
        if (k-1==index-l){
            return arr[index];
        }
        else if (k-1<index-l){
            return kthSmallest(arr, l, index-1, k);
        }
        else{
            return kthSmallest(arr, index+1, r, k-index-1+l);
        }
        
    }
    return -1;
}
